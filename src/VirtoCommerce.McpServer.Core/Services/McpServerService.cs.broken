using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Text.Json;
using System.Reflection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using VirtoCommerce.Platform.Core.Modularity;
using VirtoCommerce.McpServer.Core.Models;
using ModelContextProtocol.Protocol.Types;
using ModelContextProtocol.Protocol.Transport;
using ModelContextProtocol.Server;

namespace VirtoCommerce.McpServer.Core.Services
{
    /// <summary>
    /// Comprehensive MCP Server implementation that exposes VirtoCommerce APIs as MCP tools
    /// </summary>
    public class McpServerService : IHostedService
    {
        private readonly ILogger<McpServerService> _logger;
        private readonly IServiceProvider _serviceProvider;
        private readonly IApiDiscoveryService _apiDiscoveryService;
        private readonly IModuleManifestService _moduleManifestService;
        private readonly IXmlDocumentationService _xmlDocumentationService;

        private IMcpServer _mcpServer;
        private List<ApiEndpoint> _discoveredEndpoints;
        private readonly CancellationTokenSource _cancellationTokenSource = new();

        public McpServerService(
            ILogger<McpServerService> logger,
            IServiceProvider serviceProvider,
            IApiDiscoveryService apiDiscoveryService,
            IModuleManifestService moduleManifestService,
            IXmlDocumentationService xmlDocumentationService)
        {
            _logger = logger;
            _serviceProvider = serviceProvider;
            _apiDiscoveryService = apiDiscoveryService;
            _moduleManifestService = moduleManifestService;
            _xmlDocumentationService = xmlDocumentationService;
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            try
            {
                // Discover API endpoints from MCP-enabled modules
                _discoveredEndpoints = _apiDiscoveryService.DiscoverAllApiEndpoints().ToList();
                _logger.LogInformation("Discovered {EndpointCount} API endpoints for MCP exposure", _discoveredEndpoints.Count);

                // Create MCP server with proper configuration
                var serverOptions = CreateMcpServerOptions();

                // For VirtoCommerce modules, we'll use STDIO transport by default
                // This can be extended to support SSE for web scenarios
                var transport = new StdioServerTransport("VirtoCommerce MCP Server");

                _mcpServer = McpServerFactory.Create(transport, serverOptions);

                // Start the MCP server
                var serverTask = _mcpServer.RunAsync(_cancellationTokenSource.Token);

                _logger.LogInformation("MCP Server started successfully with {EndpointCount} tools", _discoveredEndpoints.Count);

                // Log discovered tools for debugging
                foreach (var endpoint in _discoveredEndpoints)
                {
                    _logger.LogDebug("MCP Tool: {ToolName} -> {Method} {Route} ({Description})",
                        endpoint.ToolName, endpoint.Method, endpoint.Route, endpoint.Description);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to start MCP server");
                throw;
            }
        }

        public async Task StopAsync(CancellationToken cancellationToken)
        {
            try
            {
                _cancellationTokenSource.Cancel();

                if (_mcpServer != null)
                {
                    await _mcpServer.DisposeAsync();
                }

                _logger.LogInformation("MCP Server stopped successfully");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error stopping MCP server");
            }
        }

        private McpServerOptions CreateMcpServerOptions()
        {
            var tools = _discoveredEndpoints.Select(CreateMcpTool).ToList();

            return new McpServerOptions
            {
                ServerInfo = new Implementation
                {
                    Name = "VirtoCommerce MCP Server",
                    Version = "1.0.0"
                },
                Capabilities = new ServerCapabilities
                {
                    Tools = new ToolsCapability
                    {
                        ListToolsHandler = (request, cancellationToken) =>
                        {
                            _logger.LogDebug("ListTools request received");
                            return Task.FromResult(new ListToolsResult { Tools = tools });
                        },

                        CallToolHandler = async (request, cancellationToken) =>
                        {
                            try
                            {
                                _logger.LogDebug("CallTool request: {ToolName}", request.Params?.Name);

                                if (request.Params?.Name == null)
                                {
                                    throw new McpException("Tool name is required");
                                }

                                var endpoint = _discoveredEndpoints.FirstOrDefault(e => e.ToolName == request.Params.Name);
                                if (endpoint == null)
                                {
                                    throw new McpException($"Unknown tool: '{request.Params.Name}'");
                                }

                                var result = await InvokeApiEndpointAsync(endpoint, request.Params.Arguments, cancellationToken);

                                return new CallToolResponse
                                {
                                    Content = new List<Content>
                                    {
                                        new Content
                                        {
                                            Type = "text",
                                            Text = JsonSerializer.Serialize(result, new JsonSerializerOptions { WriteIndented = true })
                                        }
                                    }
                                };
                            }
                            catch (Exception ex)
                            {
                                _logger.LogError(ex, "Error executing tool {ToolName}", request.Params?.Name);
                                throw new McpException($"Tool execution failed: {ex.Message}");
                            }
                        }
                    },

                    // Future: Add Resources and Prompts capabilities
                    Resources = null,
                    Prompts = null
                }
            };
        }

        private Tool CreateMcpTool(ApiEndpoint endpoint)
        {
            var inputSchema = CreateInputSchema(endpoint);

            return new Tool
            {
                Name = endpoint.ToolName,
                Description = endpoint.Description ?? $"{endpoint.Method} {endpoint.Route}",
                InputSchema = inputSchema
            };
        }

        private JsonElement CreateInputSchema(ApiEndpoint endpoint)
        {
            var schema = new Dictionary<string, object>
            {
                ["type"] = "object",
                ["properties"] = new Dictionary<string, object>(),
                ["required"] = new List<string>()
            };

            var properties = (Dictionary<string, object>)schema["properties"];
            var required = (List<string>)schema["required"];

            // Add parameters from the endpoint metadata
            foreach (var (paramName, paramInfo) in endpoint.Parameters)
            {
                properties[paramName] = paramInfo;

                if (paramInfo is Dictionary<string, object> paramDict &&
                    paramDict.TryGetValue("required", out var isRequired) &&
                    isRequired is true)
                {
                    required.Add(paramName);
                }
            }

            // Add route parameters
            var routeParams = ExtractRouteParameters(endpoint.Route);
            foreach (var routeParam in routeParams)
            {
                if (!properties.ContainsKey(routeParam))
                {
                    properties[routeParam] = new Dictionary<string, object>
                    {
                        ["type"] = "string",
                        ["description"] = $"Route parameter: {routeParam}"
                    };
                    required.Add(routeParam);
                }
            }

            // Convert to JsonElement for MCP protocol
            var json = JsonSerializer.Serialize(schema);
            return JsonSerializer.Deserialize<JsonElement>(json);
        }

        private List<string> ExtractRouteParameters(string route)
        {
            var parameters = new List<string>();
            var matches = System.Text.RegularExpressions.Regex.Matches(route, @"\{([^}]+)\}");

            foreach (System.Text.RegularExpressions.Match match in matches)
            {
                var paramName = match.Groups[1].Value;
                if (paramName.Contains(":"))
                {
                    paramName = paramName.Split(':')[0];
                }
                if (paramName.EndsWith("?"))
                {
                    paramName = paramName.TrimEnd('?');
                }
                parameters.Add(paramName);
            }

            return parameters;
        }

        private async Task<object> InvokeApiEndpointAsync(ApiEndpoint endpoint, Dictionary<string, JsonElement>? arguments, CancellationToken cancellationToken)
        {
            try
            {
                // This is where we would actually invoke the VirtoCommerce API
                // For now, we'll return structured information about what would be called

                _logger.LogInformation("Executing MCP tool: {ToolName} ({Method} {Route})",
                    endpoint.ToolName, endpoint.Method, endpoint.Route);

                // Parse arguments from JsonElement to object dictionary
                var parsedArguments = new Dictionary<string, object>();
                if (arguments != null)
                {
                    foreach (var (key, jsonElement) in arguments)
                    {
                        parsedArguments[key] = ParseJsonElement(jsonElement);
                    }
                }

                // Create response with API execution results
                var response = new
                {
                    success = true,
                    message = $"Successfully executed {endpoint.ToolName}",
                    endpoint = new
                    {
                        toolName = endpoint.ToolName,
                        method = endpoint.Method,
                        route = endpoint.Route,
                        module = endpoint.ModuleId,
                        controller = endpoint.ControllerName,
                        action = endpoint.ActionName
                    },
                    arguments = parsedArguments,
                    security = new
                    {
                        requiresAuthentication = endpoint.Security.RequiresAuthentication,
                        allowAnonymous = endpoint.Security.AllowAnonymous,
                        requiredPermissions = endpoint.Security.RequiredPermissions,
                        requiredRoles = endpoint.Security.RequiredRoles
                    },
                    timestamp = DateTime.UtcNow.ToString("O"),
                    note = "This is a simulation. Actual API invocation requires proper VirtoCommerce context and authentication."
                };

                return response;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error invoking API endpoint {ToolName}", endpoint.ToolName);

                return new
                {
                    success = false,
                    error = ex.Message,
                    toolName = endpoint.ToolName,
                    timestamp = DateTime.UtcNow.ToString("O")
                };
            }
        }

        private object ParseJsonElement(JsonElement element)
        {
            return element.ValueKind switch
            {
                JsonValueKind.String => element.GetString(),
                JsonValueKind.Number => element.TryGetInt32(out var i) ? i : element.GetDouble(),
                JsonValueKind.True => true,
                JsonValueKind.False => false,
                JsonValueKind.Null => null,
                JsonValueKind.Array => element.EnumerateArray().Select(ParseJsonElement).ToArray(),
                JsonValueKind.Object => element.EnumerateObject().ToDictionary(p => p.Name, p => ParseJsonElement(p.Value)),
                _ => element.ToString()
            };
        }

        // Public methods for other services
        public IEnumerable<ApiEndpoint> GetDiscoveredEndpoints()
        {
            return _discoveredEndpoints ?? Enumerable.Empty<ApiEndpoint>();
        }

        public Task<object> GetToolsAsync()
        {
            var tools = _discoveredEndpoints?.Select(CreateMcpTool).ToList() ?? new List<Tool>();
            return Task.FromResult<object>(tools);
        }
    }
}
