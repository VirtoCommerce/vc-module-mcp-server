using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using VirtoCommerce.Platform.Core.Modularity;
using System.Reflection;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Text.Json;
using VirtoCommerce.McpServer.Core.Models;

namespace VirtoCommerce.McpServer.Core.Services
{
    public class McpServerService : IHostedService
    {
        private readonly ILogger<McpServerService> _logger;
        private readonly IModuleManager _moduleManager;
        private readonly IServiceProvider _serviceProvider;
        private readonly IApiDiscoveryService _apiDiscoveryService;
        private readonly IXmlDocumentationService _xmlDocumentationService;
        private List<ApiEndpoint> _discoveredEndpoints;

        public McpServerService(
            ILogger<McpServerService> logger,
            IModuleManager moduleManager,
            IServiceProvider serviceProvider,
            IApiDiscoveryService apiDiscoveryService,
            IXmlDocumentationService xmlDocumentationService)
        {
            _logger = logger;
            _moduleManager = moduleManager;
            _serviceProvider = serviceProvider;
            _apiDiscoveryService = apiDiscoveryService;
            _xmlDocumentationService = xmlDocumentationService;
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            try
            {
                // Discover API endpoints from MCP-enabled modules
                _discoveredEndpoints = _apiDiscoveryService.DiscoverAllApiEndpoints().ToList();
                _logger.LogInformation("Discovered {EndpointCount} API endpoints for MCP exposure", _discoveredEndpoints.Count);

                // TODO: Implement actual MCP server once the correct MCP package types are available
                // For now, just log the discovered endpoints
                foreach (var endpoint in _discoveredEndpoints)
                {
                    _logger.LogDebug("Discovered MCP endpoint: {ToolName} - {Description}",
                        endpoint.ToolName, endpoint.Description);
                }

                _logger.LogInformation("MCP Server service started successfully with {EndpointCount} endpoints",
                    _discoveredEndpoints.Count);

                await Task.CompletedTask;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error starting MCP server");
                throw;
            }
        }

        public async Task StopAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("MCP Server service stopped");
            await Task.CompletedTask;
        }

        // Get discovered endpoints for other services to use
        public IEnumerable<ApiEndpoint> GetDiscoveredEndpoints()
        {
            return _discoveredEndpoints ?? Enumerable.Empty<ApiEndpoint>();
        }

        // Create MCP tool metadata from API endpoint
        public object CreateMcpTool(ApiEndpoint endpoint)
        {
            var inputSchema = CreateInputSchema(endpoint);

            var tool = new
            {
                Name = endpoint.ToolName,
                Description = endpoint.Description ?? $"{endpoint.Method} {endpoint.Route}",
                InputSchema = inputSchema
            };

            return tool;
        }

        private Dictionary<string, object> CreateInputSchema(ApiEndpoint endpoint)
        {
            var schema = new Dictionary<string, object>
            {
                ["type"] = "object",
                ["properties"] = new Dictionary<string, object>(),
                ["required"] = new List<string>()
            };

            var properties = (Dictionary<string, object>)schema["properties"];
            var required = (List<string>)schema["required"];

            foreach (var (paramName, paramInfo) in endpoint.Parameters)
            {
                properties[paramName] = paramInfo;

                if (paramInfo is Dictionary<string, object> paramDict &&
                    paramDict.TryGetValue("required", out var isRequired) &&
                    isRequired is true)
                {
                    required.Add(paramName);
                }
            }

            // Add common parameters for REST APIs
            if (endpoint.Route.Contains("{"))
            {
                // Extract route parameters
                var routeParams = ExtractRouteParameters(endpoint.Route);
                foreach (var routeParam in routeParams)
                {
                    if (!properties.ContainsKey(routeParam))
                    {
                        properties[routeParam] = new Dictionary<string, object>
                        {
                            ["type"] = "string",
                            ["description"] = $"Route parameter: {routeParam}"
                        };
                        required.Add(routeParam);
                    }
                }
            }

            return schema;
        }

        private List<string> ExtractRouteParameters(string route)
        {
            var parameters = new List<string>();
            var matches = System.Text.RegularExpressions.Regex.Matches(route, @"\{([^}]+)\}");

            foreach (System.Text.RegularExpressions.Match match in matches)
            {
                var paramName = match.Groups[1].Value;
                // Handle optional parameters and type constraints
                if (paramName.Contains(":"))
                {
                    paramName = paramName.Split(':')[0];
                }
                if (paramName.EndsWith("?"))
                {
                    paramName = paramName.TrimEnd('?');
                }
                parameters.Add(paramName);
            }

            return parameters;
        }

        // Simulate tool invocation for testing purposes
        public Task<object> InvokeApiEndpoint(ApiEndpoint endpoint, Dictionary<string, object> arguments, CancellationToken cancellationToken)
        {
            try
            {
                // For now, return a structured response indicating what would be called
                // TODO: Implement actual API invocation when VirtoCommerce hosting context is clarified

                var responseContent = new
                {
                    message = "API endpoint invocation prepared (MCP server implementation pending)",
                    endpoint = new
                    {
                        toolName = endpoint.ToolName,
                        method = endpoint.Method,
                        route = endpoint.Route,
                        module = endpoint.ModuleId,
                        controller = endpoint.ControllerName,
                        action = endpoint.ActionName
                    },
                    arguments = arguments,
                    security = new
                    {
                        requiresAuthentication = endpoint.Security.RequiresAuthentication,
                        allowAnonymous = endpoint.Security.AllowAnonymous,
                        requiredPermissions = endpoint.Security.RequiredPermissions,
                        requiredRoles = endpoint.Security.RequiredRoles
                    },
                    timestamp = DateTime.UtcNow.ToString("O")
                };

                return Task.FromResult<object>(responseContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to prepare API endpoint invocation for {ToolName}", endpoint.ToolName);

                var errorResponse = new
                {
                    error = $"Error preparing {endpoint.ToolName}: {ex.Message}",
                    timestamp = DateTime.UtcNow.ToString("O")
                };

                return Task.FromResult<object>(errorResponse);
            }
        }

        #region Legacy methods (kept for backward compatibility during transition)

        [Obsolete("Use the new enhanced API discovery system")]
        private IEnumerable<ApiEndpoint> GetApiEndpoints(Assembly assembly)
        {
            var endpoints = new List<ApiEndpoint>();

            try
            {
                // Find all controller types in the assembly
                var controllerTypes = assembly.GetTypes()
                    .Where(t => t.IsClass && !t.IsAbstract && t.Name.EndsWith("Controller"))
                    .Where(t => t.GetCustomAttribute<ApiControllerAttribute>() != null || t.GetCustomAttribute<ControllerAttribute>() != null);

                foreach (var controllerType in controllerTypes)
                {
                    // Get the base route from the controller
                    var routeAttribute = controllerType.GetCustomAttribute<RouteAttribute>();
                    var baseRoute = routeAttribute?.Template ?? controllerType.Name.Replace("Controller", "").ToLower();

                    // Get all public methods that are actions
                    var actionMethods = controllerType.GetMethods(BindingFlags.Public | BindingFlags.Instance)
                        .Where(m => m.GetCustomAttribute<HttpGetAttribute>() != null ||
                                   m.GetCustomAttribute<HttpPostAttribute>() != null ||
                                   m.GetCustomAttribute<HttpPutAttribute>() != null ||
                                   m.GetCustomAttribute<HttpDeleteAttribute>() != null);

                    foreach (var method in actionMethods)
                    {
                        var httpMethod = GetHttpMethod(method);
                        var route = GetRoute(method, baseRoute);
                        var parameters = GetParameters(method);
                        var description = GetDescription(method);

                        endpoints.Add(new ApiEndpoint
                        {
                            Method = httpMethod,
                            Route = route,
                            Parameters = parameters,
                            Description = description,
                            MethodInfo = method,
                            ControllerType = controllerType
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Failed to scan assembly {Assembly} for API endpoints", assembly.FullName);
            }

            return endpoints;
        }

        private string GetHttpMethod(MethodInfo method)
        {
            if (method.GetCustomAttribute<HttpGetAttribute>() != null) return "GET";
            if (method.GetCustomAttribute<HttpPostAttribute>() != null) return "POST";
            if (method.GetCustomAttribute<HttpPutAttribute>() != null) return "PUT";
            if (method.GetCustomAttribute<HttpDeleteAttribute>() != null) return "DELETE";
            return "GET"; // Default to GET if no attribute found
        }

        private string GetRoute(MethodInfo method, string baseRoute)
        {
            var routeAttribute = method.GetCustomAttribute<RouteAttribute>();
            if (routeAttribute != null)
            {
                return routeAttribute.Template.StartsWith("/") ? routeAttribute.Template : $"/{routeAttribute.Template}";
            }

            // If no route attribute, use the method name
            var methodName = method.Name.ToLower();
            if (methodName.StartsWith("get")) methodName = methodName[3..];
            if (methodName.StartsWith("post")) methodName = methodName[4..];
            if (methodName.StartsWith("put")) methodName = methodName[3..];
            if (methodName.StartsWith("delete")) methodName = methodName[6..];

            return $"/{baseRoute}/{methodName}";
        }

        private Dictionary<string, object> GetParameters(MethodInfo method)
        {
            var parameters = new Dictionary<string, object>();

            foreach (var param in method.GetParameters())
            {
                var paramType = param.ParameterType;
                var paramSchema = new Dictionary<string, object>
                {
                    ["type"] = GetJsonSchemaType(paramType),
                    ["description"] = GetDescription(param)
                };

                if (paramType.IsValueType && !paramType.IsEnum && !paramType.IsPrimitive)
                {
                    paramSchema["properties"] = GetTypeProperties(paramType);
                }

                parameters[param.Name] = paramSchema;
            }

            return parameters;
        }

        private string GetJsonSchemaType(Type type)
        {
            if (type == typeof(string)) return "string";
            if (type == typeof(int) || type == typeof(long) || type == typeof(short)) return "integer";
            if (type == typeof(decimal) || type == typeof(double) || type == typeof(float)) return "number";
            if (type == typeof(bool)) return "boolean";
            if (type == typeof(DateTime)) return "string";
            if (type.IsArray) return "array";
            if (type.IsEnum) return "string";
            return "object";
        }

        private Dictionary<string, object> GetTypeProperties(Type type)
        {
            var properties = new Dictionary<string, object>();

            foreach (var prop in type.GetProperties())
            {
                properties[prop.Name] = new Dictionary<string, object>
                {
                    ["type"] = GetJsonSchemaType(prop.PropertyType),
                    ["description"] = GetDescription(prop)
                };
            }

            return properties;
        }

        private string GetDescription(MemberInfo member)
        {
            var summaryAttribute = member.GetCustomAttribute<System.ComponentModel.DescriptionAttribute>();
            if (summaryAttribute != null)
            {
                return summaryAttribute.Description;
            }

            // Try to get description from XML documentation
            var xmlDoc = _xmlDocumentationService.GetDocumentation(member);
            if (!string.IsNullOrEmpty(xmlDoc))
            {
                return _xmlDocumentationService.ExtractSummary(xmlDoc);
            }

            return string.Empty;
        }

        private string GetDescription(ParameterInfo parameter)
        {
            var summaryAttribute = parameter.GetCustomAttribute<System.ComponentModel.DescriptionAttribute>();
            if (summaryAttribute != null)
            {
                return summaryAttribute.Description;
            }

            // Try to get description from XML documentation
            var xmlDoc = _xmlDocumentationService.GetDocumentation(parameter);
            if (!string.IsNullOrEmpty(xmlDoc))
            {
                return xmlDoc;
            }

            return string.Empty;
        }

        #endregion
    }
}
